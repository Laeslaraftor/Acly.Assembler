using System;

namespace Acly.Assembler
{
    /// <summary>
    /// Флаги дескрипторов сегментов в таблице глобальных дескрипторов (GDT) или локальной (LDT).
    /// Описывают свойства сегментов памяти в архитектуре x86/x86-64.
    /// </summary>
    [Flags]
    public enum SegmentFlags
    {
        /// <summary>
        /// Нет активных флагов.
        /// Используется как начальное значение или когда сегмент не используется.
        /// </summary>
        None = 0,
        /// <summary>
        /// Сегмент кода доступен на чтение.
        /// Если установлен, процессор разрешает чтение содержимого сегмента кода.
        /// Не влияет на выполнение кода — только на чтение.
        /// Применяется только к сегментам кода.
        /// </summary>
        Readable = 1 << 9,
        /// <summary>
        /// Сегмент данных доступен на запись.
        /// Если установлен, позволяет записывать данные в сегмент.
        /// Применяется только к сегментам данных.
        /// </summary>
        Writable = 1 << 1,
        /// <summary>
        /// Признак исполняемого сегмента.
        /// Если установлен, сегмент содержит код и может выполняться.
        /// Если не установлен, это сегмент данных.
        /// </summary>
        Executable = 1 << 3,
        /// <summary>
        /// Признак конформного сегмента кода.
        /// Если установлен, позволяет вызывать код из сегментов с более низким уровнем привилегий.
        /// Конформный сегмент не изменяет уровень привилегий текущего контекста (CPL).
        /// </summary>
        Conforming = 1 << 2,
        /// <summary>
        /// Указывает, что сегмент данных должен расти вниз.
        /// Обычно используется для сегментов стека.
        /// При этом база указывает на "дно" стека, а предел — на вершину.
        /// Эффективно работает только если сегмент является сегментом данных.
        /// </summary>
        ExpandDown = 1 << 2,
        /// <summary>
        /// Активирует режим длинных адресов (Long Mode).
        /// Используется в кодовых сегментах при работе в 64-битном режиме.
        /// В 32-битном режиме игнорируется.
        /// </summary>
        LongMode = 1 << 5,
        /// <summary>
        /// Гранулярность сегмента.
        /// Если установлен, предел сегмента интерпретируется в страницах по 4 Кбайт.
        /// В противном случае — в байтах (максимум 1 Мбайт).
        /// Также влияет на масштабирование размера сегмента.
        /// </summary>
        Granularity = 1 << 7,
        /// <summary>
        /// Размер операндов по умолчанию.
        /// Если установлен, сегмент использует 32-битную модель данных/адресации.
        /// Если не установлен, используется 16-битная модель.
        /// В 64-битном режиме этот флаг должен быть сброшен, если установлен LongMode.
        /// </summary>
        DefaultBig = 1 << 6,
    }
}
